// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Workflow{
  id            String @id @default(uuid())
  userId        String
  name          String
  description   String?
  definition    String
  executionPlan String?
  creditsCost   Int @default(0)
  status        String
  createdAt     DateTime @default(now())
  lastRunAt     DateTime?
  lastRunId     String?
  lastRunStatus String?
  updatedAt     DateTime @updatedAt
  cron          String? 
  nextRunAt     DateTime?
  executions    WorkflowExecution[]
  @@unique([name, userId])
}

model WorkflowExecution{
  id                String @id @default(cuid())
  workflowId        String
  userId            String
  trigger           String
  status            String
  createdAt         DateTime @default(now())
  startedAt         DateTime?
  completedAt       DateTime?
  creditsConsumed   Int @default(0)
  definition        String @default("{}")
  phases            ExecutionPhase[]
  workflow          Workflow @relation(fields: [workflowId],references: [id],onDelete: Cascade)

}

model ExecutionPhase{
   id                  String @id @default(cuid())
   userId              String
   status              String
   number              Int
   node                String
   name                String
   startedAt           DateTime?
   completedAt         DateTime?
   inputs              String?
   outputs             String?
   creditsConsumed     Int?
   workflowExecutionId String

   execution           WorkflowExecution @relation(fields: [workflowExecutionId],references: [id],onDelete: Cascade)
   logs                ExecutionLog[]
}

model ExecutionLog{
    id                    String @id @default(cuid())
    logLevel              String
    message               String
    timestamp             DateTime @default(now())

    executionPhaseId      String
    executionPhase       ExecutionPhase @relation(fields: [executionPhaseId],references: [id],onDelete: Cascade)
}

model UserBalance {
  userId String @id
  credits Int @default(0)
}

model Credential {
  id        String @id @default(cuid())
  userId    String
  name      String
  value     String
  createdAt DateTime @default(now())

  @@unique([userId,name])
}

model UserPurchase{
  id          String @id @default(cuid())
  userId      String
  stripeId    String
  description String
  amount      Int
  currency    String
  date        DateTime @default(now())
}